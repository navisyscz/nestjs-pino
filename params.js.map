{"version":3,"file":"params.js","sourceRoot":"","sources":["../src/params.ts"],"names":[],"mappings":";;;AAmDA,wCAIC;AAJD,SAAgB,cAAc,CAC5B,YAAiB;IAEjB,OAAO,CAAC,CAAC,YAAY,IAAI,QAAQ,IAAI,YAAY,CAAC;AACpD,CAAC;AAEY,QAAA,qBAAqB,GAAG,aAAa,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ModuleMetadata, Type, RequestMethod } from '@nestjs/common';\nimport { Logger, DestinationStream } from 'pino';\nimport { Options } from 'pino-http';\n\nexport type PassedLogger = { logger: Logger };\n\nexport interface RouteInfo {\n  path: string;\n  method: RequestMethod;\n}\n\nexport interface Params {\n  /**\n   * Optional parameters for `pino-http` module\n   * @see https://github.com/pinojs/pino-http#pinohttpopts-stream\n   */\n  pinoHttp?: Options | DestinationStream | [Options, DestinationStream];\n\n  /**\n   * Optional parameter to exclude routes from middleware\n   */\n  exclude?: Array<string | RouteInfo | Type<any>>;\n\n  /**\n   * Optional parameter to define which routes to apply middleware to\n   */\n  forRoutes?: Array<string | RouteInfo | Type<any>>;\n\n  /**\n   * Optional parameter to skip pino configuration if logger is already configured\n   */\n  useExisting?: true;\n\n  /**\n   * Optional parameter to rename the `context` field in logs\n   */\n  renameContext?: string;\n\n  /**\n   * Optional parameter to assign logger to response\n   */\n  assignResponse?: boolean;\n}\n\nexport interface LoggerModuleAsyncParams\n  extends Pick<ModuleMetadata, 'imports' | 'providers'> {\n  useFactory: (...args: any[]) => Params | Promise<Params>;\n  inject?: any[];\n}\n\nexport function isPassedLogger(\n  pinoHttpProp: any,\n): pinoHttpProp is PassedLogger {\n  return !!pinoHttpProp && 'logger' in pinoHttpProp;\n}\n\nexport const PARAMS_PROVIDER_TOKEN = 'pino-params';\n"]}